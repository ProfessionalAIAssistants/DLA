// Minimal FullCalendar implementation for CRM Dashboard
class FullCalendarMini {
    constructor(element, options) {
        this.element = element;
        this.options = options;
        this.currentDate = new Date();
        this.currentView = 'dayGridMonth';
        this.events = [];
        this.render();
    }

    render() {
        this.element.innerHTML = this.generateCalendarHTML();
        this.attachEventListeners();
        this.loadEvents();
    }

    generateCalendarHTML() {
        const header = this.generateHeader();
        const calendar = this.generateCalendarGrid();
        return `
            <div class="fc">
                ${header}
                ${calendar}
            </div>
        `;
    }

    generateHeader() {
        const monthNames = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];
        
        const currentMonth = monthNames[this.currentDate.getMonth()];
        const currentYear = this.currentDate.getFullYear();
        
        return `
            <div class="fc-header-toolbar">
                <div class="fc-toolbar-chunk">
                    <div class="fc-button-group">
                        <button class="fc-button fc-prev-button" onclick="calendar.prev()">‹</button>
                        <button class="fc-button fc-next-button" onclick="calendar.next()">›</button>
                    </div>
                </div>
                <div class="fc-toolbar-chunk">
                    <h2 class="fc-toolbar-title">${currentMonth} ${currentYear}</h2>
                </div>
                <div class="fc-toolbar-chunk">
                    <div class="fc-button-group">
                        <button class="fc-button fc-today-button" onclick="calendar.today()">Today</button>
                        <button class="fc-button fc-dayGridMonth-button fc-button-active">Month</button>
                    </div>
                </div>
            </div>
        `;
    }

    generateCalendarGrid() {
        const firstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
        const lastDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay());
        
        let html = `
            <div class="fc-daygrid">
                <table class="fc-daygrid-table">
                    <thead>
                        <tr class="fc-col-header">
                            <th class="fc-col-header-cell">Sun</th>
                            <th class="fc-col-header-cell">Mon</th>
                            <th class="fc-col-header-cell">Tue</th>
                            <th class="fc-col-header-cell">Wed</th>
                            <th class="fc-col-header-cell">Thu</th>
                            <th class="fc-col-header-cell">Fri</th>
                            <th class="fc-col-header-cell">Sat</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        const current = new Date(startDate);
        for (let week = 0; week < 6; week++) {
            html += '<tr class="fc-daygrid-week">';
            for (let day = 0; day < 7; day++) {
                const dayEvents = this.getEventsForDate(current);
                const isToday = this.isToday(current);
                const isCurrentMonth = current.getMonth() === this.currentDate.getMonth();
                
                html += `
                    <td class="fc-daygrid-day ${isToday ? 'fc-today' : ''} ${!isCurrentMonth ? 'fc-day-other' : ''}">
                        <div class="fc-daygrid-day-frame">
                            <div class="fc-daygrid-day-number">${current.getDate()}</div>
                            <div class="fc-daygrid-day-events">
                                ${dayEvents.map(event => `
                                    <div class="fc-daygrid-event ${event.className || ''}" style="background-color: ${event.color || '#007bff'}">
                                        <div class="fc-event-title">${event.title}</div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    </td>
                `;
                current.setDate(current.getDate() + 1);
            }
            html += '</tr>';
        }

        html += `
                    </tbody>
                </table>
            </div>
        `;

        return html;
    }

    isToday(date) {
        const today = new Date();
        return date.toDateString() === today.toDateString();
    }

    getEventsForDate(date) {
        return this.events.filter(event => {
            const eventDate = new Date(event.start);
            return eventDate.toDateString() === date.toDateString();
        });
    }

    loadEvents() {
        if (this.options.events && typeof this.options.events === 'function') {
            const start = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
            const end = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
            
            this.options.events(
                {
                    startStr: start.toISOString(),
                    endStr: end.toISOString()
                },
                (events) => {
                    this.events = events;
                    this.render();
                },
                (error) => {
                    console.error('Error loading events:', error);
                }
            );
        }
    }

    prev() {
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        this.render();
    }

    next() {
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        this.render();
    }

    today() {
        this.currentDate = new Date();
        this.render();
    }

    attachEventListeners() {
        // Event listeners are attached via onclick attributes in the HTML
    }
}

// FullCalendar compatibility layer
window.FullCalendar = {
    Calendar: FullCalendarMini
};

console.log('FullCalendar Mini loaded successfully');
